<source>
    @type forward
    tag pubsub.publish.test
    rpc_bind 0.0.0.0
    rpc_port 24224
</source>

<source>
    @type gcloud_pubsub
    tag pubsub.publish
    project ${GCP_PROJECT_ID}
    topic export-logs-to-logicmonitor
    subscription export-logs-to-logicmonitor
    max_messages 10000
    return_immediately true
    pull_interval 1
    pull_threads 1
    parse_error_action exception
    enable_rpc true
    rpc_bind 0.0.0.0
    rpc_port 24680
    <parse>
        @type json
    </parse>
</source>


<filter pubsub.publish.**>
    @type record_transformer
    enable_ruby true
    <record>
        message ${case when record["textPayload"] then record["textPayload"] else record["jsonPayload"].to_json end}
        resourcenamemapping ${case when record.dig("resource","type")=="cloud_function" then "projects/" + record.dig("resource","labels", "project_id") + "/locations/" + record.dig("resource","labels", "region")+"/functions/" + record.dig("resource","labels", "function_name") when record.dig("resource","type")=="gce_instance" then record.dig("labels", "compute.googleapis.com/resource_name") end}
        resourceidmapping ${case when record.dig("resource","type")=="gce_instance" then record.dig("resource","labels", "instance_id") end}
        timestamp ${record["timestamp"]}
        tag ${tag}
    </record>
</filter>

<filter pubsub.publish.**>
    @type record_transformer
    enable_ruby true
    <record>
        message ${record["message"]}
        _lm.resourceId ${case when record["resourcenamemapping"] then {"system.gcp.resourcename" => record["resourcenamemapping"]} when record["resourceidmapping"] then {"system.gcp.resourceid" => record["resourceidmapping"]} end}
        timestamp ${record["timestamp"]}
        tag ${tag}
  </record>
</filter>

<match pubsub.publish.test>
    @type copy
    <store>
        @type file
        path /tmp/fluentd-test-output.log
        append true
        add_path_suffix false
        <format>
            @type json
        </format>
        <buffer []>
            @type memory
            chunk_limit_records 1
            retry_max_times 0
        </buffer>
    </store>
</match>

<match pubsub.publish>
    @type lm
    company_name ${LM_COMPANY_NAME}
    access_id ${LM_ACCESS_ID}
    access_key ${LM_ACCESS_KEY}
    log_source "lm-logs-gcp"
    version_id "1.0.0"
    <buffer>
        @type memory
        flush_interval 1s
        chunk_limit_size 5m
    </buffer>
    debug false
</match>